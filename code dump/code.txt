using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Fusion;
using UnityEngine.UIElements;
using ExitGames.Client.Photon.StructWrapping;
using System.Linq;


public class SphereLatencyManager : NetworkBehaviour
{
    public GameObject SphereGenerator_obj;
    private List<GameObject> sphereList;
    private List<Vector3> delayedPositions;
    // Start is called before the first frame update
    private float baseLatency_ = 0.2f;
    private float jiter_max = 0.1f;

    private float jiter_min = 0.05f;
    private float pktLossProb = 0.95f;
    private bool delayDone = false;
    private Queue<List<Vector3>> delayQueue = new Queue<List<Vector3>>();
    private bool pktLost = false;
    private bool applyUpdate = false;
    //private float interpolateProgress = 0f;


    private class PositionData
    {
        public Vector3 lastVelocity;
        public Vector3 lastPosition;
        public float lastUpdateTime = 0f;

        public float interpolateProgress;
        public bool doneInterpolate = false;

    }
    private List<PositionData> positionData = new List<PositionData>();

    public override void Spawned()
    {
        base.Spawned(); // Not required, but keeps compatibility

        delayedPositions = new List<Vector3>();
        Debug.Log("Is HOST " + Object.HasStateAuthority);
        if (Object.HasStateAuthority)
        {
        }
        StartCoroutine(WaitForSpheresToGenerate());
    }

    private IEnumerator WaitForSpheresToGenerate()
    {
        while (!SphereGenerator.GENERATED)
        {
            yield return null;
        }
        sphereList = new List<GameObject>(SphereGenerator_obj.GetComponent<SphereGenerator>().sphereList);

        foreach (var sphere in sphereList)
        {
            Rigidbody rb = sphere.GetComponent<Rigidbody>();
            PositionData pd = new PositionData();
            pd.lastUpdateTime = Time.time;
            pd.lastVelocity = rb.velocity;
            pd.lastPosition = rb.position;
            positionData.Add(pd);
        }

        StartCoroutine(SimulateNetwork());

    }


    // Update is called once per frame
    void FixedUpdate()
    {
        //extrapolate position
        // if (!applyUpdate && pktLost)
        // {
        //     for (int i = 0; i < positionData.Count; i++)
        //     {
        //         Rigidbody rb = sphereList[i].GetComponent<Rigidbody>();
        //         Vector3 extrapolatedPos = positionData[i].lastPosition + positionData[i].lastVelocity * (Time.time - positionData[i].lastUpdateTime);

        //         rb.MovePosition(extrapolatedPos);
        //     }
        // }
        /*
        Isnt happening smoothly, slerp happens over a number of frames. Need to know when complete
        
        */
        //else 
        if (delayDone && delayQueue.Count > 0)
        {
            applyUpdate = true;
        }

        if (applyUpdate)
        {
            Debug.Log("Resetting positions");
            List<Vector3> peek = new List<Vector3>(delayQueue.Peek());

            for (int i = 0; i < peek.Count; i++)
            {
                if (positionData[i].doneInterpolate) continue;
                Rigidbody rb = sphereList[i].GetComponent<Rigidbody>();
                Vector3 pos = rb.position;
                Vector3 targetPosition = peek[i];

                positionData[i].interpolateProgress += 1 * Time.fixedDeltaTime;

                Vector3 newPos = Vector3.Lerp(pos, targetPosition, positionData[i].interpolateProgress);

                rb.MovePosition(newPos);

                if (Vector3.Distance(newPos, targetPosition) < 0.01f)
                {
                    positionData[i].doneInterpolate = true;
                    positionData[i].interpolateProgress = 0;
                    Debug.Log("Done with lerp");

                }
            }

            // int count = 0;
            // for (int i = 0; i < peek.Count; i++)
            // {
            //     //check if sphere is done interpolating
            //     if (positionData[i].doneInterpolate)
            //     {
            //         count++;
            //     }
            //     else break;
            // }
            // //if all are done interpolating
            // if (count == peek.Count)
            // {
            //     Debug.Log("All done interpolating");
            //     //reset interpolate status
            //     for (int i = 0; i < peek.Count; i++)
            //     {
            //         positionData[i].doneInterpolate = false;

            //     }
            //     //pop from queue
            //     delayQueue.Dequeue();
            //     //reset update status
            //     applyUpdate = false;
            // }

            if (positionData.All(pd => pd.doneInterpolate))
            {
                Debug.Log("All done interpolating");

                // Reset interpolation status for next update
                foreach (var pd in positionData)
                {
                    pd.doneInterpolate = false;
                }

                delayQueue.Dequeue(); // Remove processed position update
                applyUpdate = false; // Stop updating
            }
        }


    }
    private IEnumerator SimulateNetwork()
    {
        List<Rigidbody> rbCache = new List<Rigidbody>();
        foreach (var sphere in sphereList)
        {
            rbCache.Add(sphere.GetComponent<Rigidbody>());
        }
        while (true)
        {
            float pktDelayTime = baseLatency_ + Random.Range(-jiter_min, jiter_max);
            delayedPositions = new List<Vector3>();
            if (Random.value > pktLossProb)
            {
                pktLost = false;
                Debug.Log("LATENCY " + pktDelayTime);
                delayDone = false;
                //Debug.Log("Pkt loss");
                for (int i = 0; i < sphereList.Count; i++)
                {
                    Rigidbody rb = rbCache[i];
                    delayedPositions.Add(rb.position);

                    float deltaTime = Time.time - positionData[i].lastUpdateTime;
                    if (deltaTime > 0)
                    {
                        positionData[i].lastVelocity = (rb.position - positionData[i].lastPosition) / deltaTime;
                    }
                    positionData[i].lastUpdateTime = Time.time;
                }

                delayQueue.Enqueue(delayedPositions);

                Debug.Log("Done adding positions " + delayQueue.Count);
            }
            else
            {
                pktLost = true;
            }
            //Debug.Log("Waiting");
            yield return new WaitForSecondsRealtime(pktDelayTime);
            delayDone = delayedPositions.Count != 0;

            //Debug.Log("Done waiting");
        }
    }
}


